{"version":3,"sources":["Header.js","Actor.js","Movie.js","moviesData.js","App.js","serviceWorker.js","index.js"],"names":["Header","state","message","changeMessage","_this","setState","react_default","a","createElement","onClick","this","Component","Actor","props","name","role","Movie","liked","showCast","changeLike","toggleCast","_this2","castMembers","cast","map","member","index","src_Actor","key","title","deleteMovie","id","director","movies","App","moviesFiltered","filter","movie","deleteMovies","deleteButton","src_Header_0","length","src_Movie_0","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.f343f726.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './Header.css';\n\nclass Header extends Component {\n\n  state = {\n    message: 'The Movie App'\n  }\n\n  changeMessage = () => {\n    this.setState({\n      message: \"New Message\"\n    })\n  }\n\n  render() {\n    return (\n      <header>\n        <h1 onClick={this.changeMessage} >{this.state.message}</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header;\n","import React, { Component } from 'react';\n\nconst Actor = (props) => (\n    <li>{props.name} as {props.role}</li>\n)\n// class Actor extends Component {\n//     render() {\n//         return (\n//             <li>{this.props.name} as {this.props.role}</li>\n//         )\n//     }\n// }\n\nexport default Actor;\n","import React, { Component } from 'react';\nimport Actor from './Actor';\nimport './Movie.css';\n\nclass Movie extends Component {\n    state = {\n        liked: false,\n        showCast: false\n    }\n    changeLike = () => {\n        this.setState({\n            liked: !this.state.liked\n        })\n    }\n\n    toggleCast = () =>{\n        this.setState({\n            showCast: !this.state.showCast\n        })\n    }\n    render() {\n        let castMembers = (\n            <ul>\n                  {this.props.cast.map( (member, index) => <Actor key={index} name={member.name} role={member.role} />)}\n            </ul>\n        )\n\n        return (\n            <div>\n                <h3>{this.props.title} <button onClick={() => this.props.deleteMovie(this.props.id)} >Delete Movie</button></h3>\n                <button onClick={this.changeLike}>{this.state.liked ? 'Unlike' : 'Like'}</button>\n                <p>Directed by: {this.props.director}</p>\n                <p>Starring: <button onClick={this.toggleCast}>{this.state.showCast ? \"Hide Cast\" : \"Show Cast\"}</button></p>\n                {this.state.showCast ? castMembers : \"\"}\n            </div>\n        )\n    }\n\n}\n\nexport default Movie;\n","const movies = [\n    {\n      id: 1,\n      title: 'Dr. Strangelove',\n      director: 'Stanley Kubrick',\n      cast: [\n        {\n          name: 'Peter Sellers',\n          role: 'President Merkin Muffley'\n        },\n        {\n          name: 'George C. Scott',\n          role: 'General Buck Turgidson'\n        },\n        {\n          name: 'Slim Pickens',\n          role: 'Major T.J. \"King\" Kong'\n        }\n      ]\n    },\n    {\n      id: 2,\n      title: 'Eraserhead',\n      director: 'David Lynch',\n      cast: [\n        {\n          name: 'Jack Nance',\n          role: 'Henry Spencer'\n        },\n        {\n          name: 'Charlotte Stewart',\n          role: 'Mary X'\n        },\n        {\n          name: 'Jeanne Bates',\n          role: 'Mrs. X'\n        }\n      ]\n    },\n    {\n      id: 3,\n      title: 'Fantastic Mr. Fox',\n      director: 'Wes Anderson',\n      cast: [\n        {\n          name: 'George Clooney',\n          role: 'Mr. Fox'\n        },\n        {\n          name: 'Meryl Streep',\n          role: 'Mrs. Fox'\n        },\n        {\n          name: 'Bill Murray',\n          role: 'Badger'\n        }\n      ]\n    }\n  ]\n\nexport default movies;","import React, { Component } from 'react';\nimport './App.css';\nimport Header from './Header';\nimport Movie from './Movie';\nimport movies from './moviesData';\n\nclass App extends Component {\n  state = {\n    movies: movies\n  }\n  deleteMovie = (id)=> {\n    let moviesFiltered = this.state.movies.filter((movie)=> movie.id !== id)\n    this.setState({\n      movies: moviesFiltered\n    })\n  }\n  deleteMovies = ()=>{\n    this.setState({\n      movies: []\n    })\n  }\n  render() {\n    const deleteButton = (\n      <button onClick={this.deleteMovies}>Delete All Movies</button>\n    )\n    return (\n      <div>\n        <Header/> \n        {this.state.movies.length == 0 ? <p>No Movies</p> : deleteButton}\n        {this.state.movies.map(movie => <Movie key={movie.id} id={movie.id} deleteMovie={this.deleteMovie} director={movie.director} cast={movie.cast} title={movie.title}/>)}\n      </div>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}